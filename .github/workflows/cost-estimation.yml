name: Terraform Cost Estimation

on:
  pull_request:
    branches: [ main, master ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/cost-estimation.yml'

jobs:
  cost-estimation:
    runs-on: ubuntu-latest
    
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      COST_THRESHOLD: ${{ secrets.COST_THRESHOLD }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: |
          terraform plan -out=plan.out
          terraform show -json plan.out > plan.json

      - name: Run Cost Estimation
        id: cost-estimation
        run: |
          # Create cost report file
          python -m terrafin_calculator \
            --plan-file plan.json \
            --output-format markdown \
            --output-file cost-report.md \
            --slack-webhook "$SLACK_WEBHOOK_URL" \
            ${COST_THRESHOLD:+--cost-threshold "$COST_THRESHOLD"}

      - name: Comment PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('cost-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: report
            });

      - name: Check for Cost Report
        if: failure()
        run: |
          if [ -f cost-report.md ]; then
            echo "Cost estimation failed but report was generated:"
            cat cost-report.md
          else
            echo "No cost report was generated"
          fi

      - name: Upload Cost Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cost-report
          path: cost-report.md
          if-no-files-found: ignore
